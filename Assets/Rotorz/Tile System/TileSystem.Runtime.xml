<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>TileSystem.Runtime</name>
  </assembly>
  <members>
    <member name="T:Rotorz.Tile.AliasBrush">
      <summary>
            An alias brush targets an existing brush allowing the user to override certain
            properties and remap materials.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.ApplyTransforms(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,Rotorz.Tile.Brush)">
      <summary>
            Apply transforms to newly painted tile and orientate against tile system.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transformer">Brush used to transform painted tile.
            The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields of transform
            brush should be used. <c>transformer</c> may refer to this brush, or it may refer
            to another (like alias or oriented for example).</param>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.CalculateManualOffset(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,Rotorz.Tile.Brush)">
      <summary>
            Calculates offset from actual tile position and where tile would normally be
            positioned by brush. This is used to preserve manually tweaked offsets when
            tiles are refreshed.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transform">Tile transform component.</param>
      <param name="offsetPosition">Manual position offset.</param>
      <param name="offsetRotation">Manual rotation offset.</param>
      <param name="offsetScale">Manual scale offset.</param>
      <param name="transformer">Brush used to transform painted tile.</param>
      <returns>
            A value of <c>true</c> if an offset was calculated; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.CanOverrideTagAndLayer">
      <summary>
            Gets a value indicating whether layer and tag properties can be overridden by
            this <see cref="T:Rotorz.Tile.Brush" />.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.Coalesce">
      <summary>
            Gets or sets the coalescing rule that defines how painted tiles orientate with
            one another.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.CoalesceBrushGroup">
      <summary>
            Gets or sets brush group that painted tiles can coalesce with.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.CoalesceWithRotated">
      <summary>
            Gets or sets a value indicating whether painted tiles can coalesce with
            tiles which have been painted with a different rotation.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.CreateTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Create visual representation of tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.GetNthMaterial(System.Int32)">
      <summary>
            Gets the nth material from available renderers.
            </summary>
      <param name="n">Index of material to find.</param>
      <returns>
            The nth material; or <c>null</c> if no materials were detected.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.MaterialMappingFrom">
      <summary>
            Gets or sets list of materials to map from.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.MaterialMappingTo">
      <summary>
            Gets or sets list of materials to map to.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.OnDrawImmediatePreview(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Material,Rotorz.Tile.Brush)">
      <summary>
            Draws preview of tile using the Unity graphics or gizmos class.
            </summary>
      <param name="context">Describes context of tile that is being previewed.</param>
      <param name="previewTile">Data for preview tile.</param>
      <param name="previewMaterial">Material to use for preview.</param>
      <param name="transformer">Brush used to transform painted
            tile. The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields
            of transform brush should be used. <c>transformer</c> may refer to this brush,
            or it may refer to another (like alias or oriented for example).</param>
    </member>
    <member name="F:Rotorz.Tile.AliasBrush.overrideFlags">
      <summary>
            Indicates if this brush should override the flags of its target.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.PerformsAutomaticOrientation">
      <summary>
            Gets a value indicating whether brush automatically orientates tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.PostProcessTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Post process newly painted tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.PrepareTileData(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,System.Int32,System.Boolean)">
      <summary>
            Prepare tile data.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">Tile that is to be prepared.</param>
      <param name="variationIndex">Hint at the desired variation index, however the
            value of this parameter can be ignored. For example, this parameter may be ignored
            if the specified variation is invalid.</param>
      <param name="refresh">Indicates if data is being prepared to refresh tile.</param>
    </member>
    <member name="M:Rotorz.Tile.AliasBrush.RevertToTarget">
      <summary>
            Revert alias brush to match its target as closely as possible.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.AliasBrush.target">
      <summary>
            The target brush to create an alias of.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AliasBrush.UseWireIndicatorInEditor">
      <summary>
            Gets a value indicating whether to use wireframe cursor when painting in the
            editor. When <c>false</c> an alternative representation can be used instead.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.AutotileBrush">
      <summary>
            Autotile brushes make it easier for artists to design 2D tiles that connect with
            one another. This type of brush is particularly useful for creating things like
            walls, paths, platforms, etc.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.AutotileBrush.addInnerCollider">
      <summary>
            Indicates whether box colliders should be added to inner painted tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AutotileBrush.Awake">
      <summary>
            Invoked when brush first becomes active.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.Coalesce">
      <summary>
            Gets or sets the coalescing rule that defines how painted tiles orientate
            with one another.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.CoalesceBrushGroup">
      <summary>
            Gets or sets brush group that painted tiles can coalesce with.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.CoalesceWithRotated">
      <summary>
            Gets or sets a value indicating whether painted tiles can coalesce with
            tiles which have been painted with a different rotation.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AutotileBrush.CreateTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Create visual representation of tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.InnerSolidFlag">
      <summary>
            Gets or sets a value indicating whether inner painted tiles should be
            flagged as solid.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.Layout">
      <summary>
            Gets the style of autotile layout.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.PerformsAutomaticOrientation">
      <summary>
            Gets a value indicating whether brush automatically orientates tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AutotileBrush.PrepareTileData(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,System.Int32,System.Boolean)">
      <summary>
            Prepare tile data.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">Tile that is to be prepared.</param>
      <param name="variationIndex">Hint at the desired variation index, however the
            value of this parameter can be ignored. For example, this parameter may be ignored
            if the specified variation is invalid.</param>
      <param name="refresh">Indicates if data is being prepared to refresh tile.</param>
    </member>
    <member name="P:Rotorz.Tile.AutotileBrush.Tileset">
      <summary>
            Gets tileset that brush belongs to.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.AutotileLayout">
      <summary>
            Style of autotile layout.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.AutotileLayout.Extended">
      <summary>
            Extended autotile layout.
            <para><img src="../art/extended-style.jpg" /></para></summary>
    </member>
    <member name="F:Rotorz.Tile.AutotileLayout.Basic">
      <summary>
            Basic autotile layout.
            <para><img src="../art/basic-style.jpg" /></para></summary>
    </member>
    <member name="T:Rotorz.Tile.AutotileTileset">
      <summary>
            Autotile tilesets are created automatically and are paired with an atlas texture
            that is an expanded form of the input autotile artwork.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileTileset.AutotileLayout">
      <summary>
            Gets the style of autotile layout.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AutotileTileset.CreatePrimaryBrush(System.String)">
      <summary>
            Create instance of primary autotile brush.
            </summary>
      <param name="name">Name for brush.</param>
      <returns>
            The new autotile brush.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.AutotileTileset.CreateSecondaryBrush(System.String)">
      <summary>
            Create instance of secondary autotile brush.
            </summary>
      <param name="name">Name for brush.</param>
      <returns>
            The new tileset brush.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.AutotileTileset.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AutotileTileset.FindClosestIndexFromOrientation(System.Int32)">
      <summary>
            Finds tile index that is closest to specified orientation.
            </summary>
      <param name="orientation">Bit mask of tile orientation.</param>
      <returns>
            Zero-based index of tile in tileset.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.AutotileTileset.FindClosestOrientation(System.Int32)">
      <summary>
            Finds the closest match for the specified orientation.
            </summary>
      <param name="orientation">Bit mask of tile orientation.</param>
      <returns>
            Bit mask of the closest available orientation.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.AutotileTileset.ForceClampEdges">
      <summary>
            Gets or sets a value indicating whether edges should be clamped
            when generating atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.AutotileTileset.HasInnerJoins">
      <summary>
            Gets a value indicating whether autotile tileset contains inner joins.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AutotileTileset.IndexFromOrientation(System.Int32)">
      <summary>
            Gets tile index for specified orientation.
            </summary>
      <param name="orientation">Bit mask of tile orientation.</param>
      <returns>
            Zero-based index of tile in tileset; or <c>-1</c> if undefined.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.AutotileTileset.IsSecondaryBrushSupported">
      <summary>
            Gets a value indicating whether secondary brush is supported.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.AutotileTileset.OrientationFromIndex(System.Int32)">
      <summary>
            Gets orientation for specified tile index.
            </summary>
      <param name="index">Zero-based index of tile in tileset.</param>
      <returns>
            Bit-mask representation of orientation; or <c>-1</c> if undefined.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.AutotileTileset.rawTexture">
      <summary>
            Raw texture that was used to generate autotile atlas.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.Brush">
      <summary>
            A brush is a template that defines how tiles can be painted and maintained on a
            tile system. Brushes are typically used in conjunction with tools when using the
            editor, however it is useful to note that brushes can also be orchestrated by
            custom scripts at runtime.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.applyPrefabTransform">
      <summary>
            Indicates when prefab transform should be used to transform painted tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.ApplyTransforms(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,Rotorz.Tile.Brush)">
      <summary>
            Apply transforms to newly painted tile and orientate against tile system.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transformer">Brush used to transform painted tile.
            The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields of transform
            brush should be used. <c>transformer</c> may refer to this brush, or it may refer
            to another (like alias or oriented for example).</param>
    </member>
    <member name="M:Rotorz.Tile.Brush.Awake">
      <summary>
            Invoked when brush first becomes active.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.CalculateManualOffset(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,Rotorz.Tile.Brush)">
      <summary>
            Calculates offset from actual tile position and where tile would normally be
            positioned by brush. This is used to preserve manually tweaked offsets when
            tiles are refreshed.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transform">Tile transform component.</param>
      <param name="offsetPosition">Manual position offset.</param>
      <param name="offsetRotation">Manual rotation offset.</param>
      <param name="offsetScale">Manual scale offset.</param>
      <param name="transformer">Brush used to transform painted tile.</param>
      <returns>
            A value of <c>true</c> if an offset was calculated; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Brush.CanOverrideTagAndLayer">
      <summary>
            Gets a value indicating whether layer and tag properties can be overridden by
            this <see cref="T:Rotorz.Tile.Brush" />.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Brush.CanPreserveTransform">
      <summary>
            Gets a value indicating whether transform of attached game object can be
            preserved when refreshing tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.category">
      <summary>
            Number of category that brush belongs to.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.coalesce">
      <summary>
            Coalescing rule defines how tiles should orientate with one another as they
            are painted.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.coalesceBrushGroup">
      <summary>
            Tile group that painted tiles can coalesce with.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.coalesceWithRotated">
      <summary>
            Indicates whether painted tiles can coalesce with tiles which have been
            painted with a different rotation.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.CreateTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Create visual representation of tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="F:Rotorz.Tile.Brush.customPreviewDesignTime">
      <summary>
            Indicates whether custom preview should be used at design time.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.customPreviewImage">
      <summary>
            Allows custom preview image to be assigned to brush.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.Cycle(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32)">
      <summary>
            Cycle through tile variations.
            </summary>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="nextRotation">Zero-based index of next desired rotation.</param>
      <param name="nextVariation">Zero-based index of next desired variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.CycleWithSimpleRotation(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Cycle through tile variations and/or rotation indices.
            </summary>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="nextRotation">Zero-based index of next desired rotation.</param>
      <param name="nextVariation">Zero-based index of next desired variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Brush.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.DestroyTileGameObject(Rotorz.Tile.TileData,Rotorz.Tile.TileSystem)">
      <summary>
            Destroy tile game object.
            </summary>
      <param name="tile">Data of associated tile.</param>
      <param name="system">Associated tile system.</param>
    </member>
    <member name="F:Rotorz.Tile.Brush.disableImmediatePreview">
      <summary>
            Indicates whether immediate preview should be disabled for this brush.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Brush.DisplayName">
      <summary>
            Gets user friendly name of brush that is displayed in user interfaces.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.forceLegacySideways">
      <summary>
            Indicates if legacy behaviour should be assumed when painting tiles on
            tile systems that have sideways facing tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.GetNthMaterial(System.Int32)">
      <summary>
            Gets the nth material from available renderers.
            </summary>
      <param name="n">Index of material to find.</param>
      <returns>
            The nth material; or <c>null</c> if no materials were detected.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.GetTransformMatrix(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32,UnityEngine.Transform)">
      <summary>
            Gets matrix that describes transformation of tile painted using brush in world
            space.
            </summary>
      <param name="system">Tile system.</param>
      <param name="row">Zero-based index of row.</param>
      <param name="column">Zero-based index of column.</param>
      <param name="rotation">Rotational index of tile (0, 1, 2 or 3).</param>
      <param name="tile">Transform component of tile (optional).</param>
      <returns>
            A transform-rotation-scale matrix.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.GetTransformMatrix(Rotorz.Tile.TileSystem,System.Int32,System.Int32,UnityEngine.Transform)">
      <summary>
            Gets matrix that describes transformation of tile painted using brush in world
            space.
            </summary>
      <param name="system">Tile system.</param>
      <param name="row">Zero-based index of row.</param>
      <param name="column">Zero-based index of column.</param>
      <param name="tile">Transform component of tile (optional).</param>
      <returns>
            A transform-rotation-scale matrix.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.GetUserFlag(System.Int32)">
      <summary>
            Get state of custom user flag.
            </summary>
      <param name="flag">Number of user flag (1-16)</param>
      <returns>
            A value of <c>true</c> if flag is on; otherwise <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when flag number was out of range.
            </exception>
    </member>
    <member name="F:Rotorz.Tile.Brush.group">
      <summary>
            Group that brush belong to.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Brush.HistoryName">
      <summary>
            Gets name for object which can be shown in selection history listings.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.InstantiatePrefabForTile(UnityEngine.GameObject,Rotorz.Tile.TileData,Rotorz.Tile.TileSystem)">
      <summary>
            Instantate prefab for tile.
            </summary>
      <param name="prefab">The prefab asset.</param>
      <param name="tile">Data of associated tile.</param>
      <param name="system">Associated tile system.</param>
      <returns>
            The instantiated game object; or a value of <c>null</c>.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.Brush.layer">
      <summary>
            Layer to assign to game objects that are attached to painted tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.OnDrawImmediatePreview(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Material,Rotorz.Tile.Brush)">
      <summary>
            Draws preview of tile using the Unity graphics or gizmos class.
            </summary>
      <param name="context">Describes context of tile that is being previewed.</param>
      <param name="previewTile">Data for preview tile.</param>
      <param name="previewMaterial">Material to use for preview.</param>
      <param name="transformer">Brush used to transform painted
            tile. The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields
            of transform brush should be used. <c>transformer</c> may refer to this brush,
            or it may refer to another (like alias or oriented for example).</param>
    </member>
    <member name="F:Rotorz.Tile.Brush.overrideLayer">
      <summary>
            Indicates whether brush should override the layer of game objects that are
            attached to painted tiles when applicable.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.overrideTag">
      <summary>
            Indicates whether brush should override the tag of game objects that are
            attached to painted tiles when applicable.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.overrideTransforms">
      <summary>
            Indicates if this brush should override the transforms of target brushes.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.Paint(Rotorz.Tile.TileSystem,Rotorz.Tile.TileIndex)">
      <summary>
            Paint tile using brush.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.Paint(Rotorz.Tile.TileSystem,Rotorz.Tile.TileIndex,System.Int32)">
      <summary>
            Paint tile using brush.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.Paint(Rotorz.Tile.TileSystem,System.Int32,System.Int32)">
      <summary>
            Paint tile using brush.
            </summary>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.Paint(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32)">
      <summary>
            Paint tile using brush.
            </summary>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.PaintWithSimpleRotation(Rotorz.Tile.TileSystem,Rotorz.Tile.TileIndex,System.Int32)">
      <summary>
            Paint tile with simple rotation transformation.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="rotation">Zero-based index of rotation (0 = 0°, 1 = 90°, 2 = 180°, 3 = 270°).</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.PaintWithSimpleRotation(Rotorz.Tile.TileSystem,Rotorz.Tile.TileIndex,System.Int32,System.Int32)">
      <summary>
            Paint tile with simple rotation transformation.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="rotation">Zero-based index of rotation (0 = 0°, 1 = 90°, 2 = 180°, 3 = 270°).</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.PaintWithSimpleRotation(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32)">
      <summary>
            Paint tile with simple rotation transformation.
            </summary>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="rotation">Zero-based index of rotation (0 = 0°, 1 = 90°, 2 = 180°, 3 = 270°).</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Brush.PaintWithSimpleRotation(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Paint tile with simple rotation transformation.
            </summary>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="rotation">Zero-based index of rotation (0 = 0°, 1 = 90°, 2 = 180°, 3 = 270°).</param>
      <param name="variationIndex">Zero-based index of variation to assume. Specify
            <see cref="F:Rotorz.Tile.Brush.RANDOM_VARIATION" /> to assume a random variation.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Brush.PerformsAutomaticOrientation">
      <summary>
            Gets a value indicating whether brush automatically orientates tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.PostProcessTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Post process newly painted tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="M:Rotorz.Tile.Brush.PrepareTileData(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,System.Int32,System.Boolean)">
      <summary>
            Prepare tile data.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">Tile that is to be prepared.</param>
      <param name="variationIndex">Hint at the desired variation index, however the
            value of this parameter can be ignored. For example, this parameter may be ignored
            if the specified variation is invalid.</param>
      <param name="refresh">Indicates if data is being prepared to refresh tile.</param>
    </member>
    <member name="F:Rotorz.Tile.Brush.RANDOM_VARIATION">
      <summary>
            Indicates that a random variation should be used.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.Refresh(Rotorz.Tile.TileSystem,System.Int32,System.Int32,Rotorz.Tile.RefreshFlags)">
      <summary>
            Refresh a tile.
            </summary>
      <param name="system">The tile system.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="flags">A bitwise combination of RefreshFlags values.</param>
      <returns>
            A <see cref="T:Rotorz.Tile.TileData" /> object that describes the tile that was painted.
            Returns <c>null</c> if no tile is painted.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.Brush.scaleMode">
      <summary>
            Indicates how painted tiles should be scaled.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Brush.SetUserFlag(System.Int32,System.Boolean)">
      <summary>
            Set state of custom user flag.
            </summary>
      <param name="flag">Number of user flag (1-16)</param>
      <param name="on">Specify <c>true</c> to set flag, or <c>false</c> to unset flag.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when flag number was out of range.
            </exception>
    </member>
    <member name="P:Rotorz.Tile.Brush.Smooth">
      <summary>
            Gets or sets a value that indicates whether the normals of tiles painted using
            brush should be smoothed when tile system is built.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Brush.SolidFlag">
      <summary>
            Gets or sets a value indicating whether painted tiles should be flagged as
            solid.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Brush.Static">
      <summary>
            Gets or sets a value that indicates if brush is static.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.tag">
      <summary>
            Tag to assign to game objects that are attached to painted tiles.
            </summary>
    </member>
    <member name="E:Rotorz.Tile.Brush.TilePainted">
      <summary>
            Occurs when a tile is painted using a brush.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.transformScale">
      <summary>
            Scale to apply when transforming painted tiles.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Brush.UseWireIndicatorInEditor">
      <summary>
            Gets a value indicating whether to use wireframe cursor when painting in the
            editor. When <c>false</c> an alternative representation can be used instead.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Brush.visibility">
      <summary>
            Visibility of brush in user interfaces.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.BrushNozzle">
      <summary>
            Shape of brush nozzle.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BrushNozzle.Round">
      <summary>
            Paints round area of tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BrushNozzle.Square">
      <summary>
            Paints square area of tiles.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.BrushOrientation">
      <summary>
            Defines a single orientation of an oriented brush.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.BrushOrientation.GetGroupedOrientationMasks">
      <summary>
            Gets orientation masks of grouped orientations. Resulting array always
            includes mask of this orientation.
            </summary>
      <returns>
            An array of orientation bitmasks.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.BrushOrientation.HasRotationalSymmetry">
      <summary>
            Indicates whether orientation is linked to other orientations with
            rotational symmetry.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.BrushOrientation.Mask">
      <summary>
            Gets bitmask representation of orientation.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.BrushOrientation.Rotation">
      <summary>
            Gets index of rotation of orientation.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BrushOrientation.variations">
      <summary>
            One or more variations for orientation.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.BrushPropertyAttribute">
      <summary>
            This attribute can be added to brush properties in custom scripts to indicate
            whether alias or master brushes can be selected.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.BrushPropertyAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Tile.BrushPropertyAttribute" /> class.
            </summary>
      <param name="allowAlias">Indicates whether alias brushes can be selected.</param>
      <param name="allowMaster">Indicates whether master brushes can be selected.</param>
    </member>
    <member name="T:Rotorz.Tile.BrushVisibility">
      <summary>
            The visibility of a brush.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BrushVisibility.Hidden">
      <summary>
            Brush is hidden.
            <para>Brushes that are not intended for direct use when designing levels can
            be hidden from brush lists by marking them as hidden.</para></summary>
    </member>
    <member name="F:Rotorz.Tile.BrushVisibility.Shown">
      <summary>
            Brush is shown.
            <para>Brush should be shown in brush lists unless otherwise filtered.</para></summary>
    </member>
    <member name="F:Rotorz.Tile.BrushVisibility.Favourite">
      <summary>
            Brush is shown and marked as a favorite.
            <para>Brush list controls provide the option to show or hide tileset brushes.
            Sometimes it is useful to hide all tileset brushes with the exception of those
            that have been favorited.</para><para>Brush should be shown in brush lists unless otherwise filtered.</para></summary>
    </member>
    <member name="T:Rotorz.Tile.BuildCombineMethod">
      <summary>
            Method of combining to perform upon build.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BuildCombineMethod.None">
      <summary>
            Do not combine meshes.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BuildCombineMethod.ByChunk">
      <summary>
            Combine meshes on a per chunk basis.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BuildCombineMethod.ByTileSystem">
      <summary>
            Combine meshes on a per tile system basis.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.BuildCombineMethod.CustomChunkInTiles">
      <summary>
            Combine meshes on custom chunk size. This essentially allows you to work with
            a different chunk size when tile meshes are combined.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.Chunk">
      <summary>
            A chunk is a sub-grid of tiles which forms part of an overall tile system. The
            size of a chunk is specified when creating a tile system though can be changed via
            the tile system inspector.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Chunk.CalculateMidPoint(UnityEngine.Space)">
      <summary>
            Calculate mid point of chunk.
            </summary>
      <param name="space">Space in which to calculate position.</param>
      <returns>
            Mid point of chunk in specified space.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.Chunk.CountNonEmptyTiles">
      <summary>
            Count the number of non-empty tiles.
            </summary>
      <returns>
            The number non-empty tiles.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Chunk.Dirty">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Rotorz.Tile.Chunk" />
            is dirty.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Chunk.FindTileIndexFromGameObject(UnityEngine.Transform)">
      <summary>
            Find index of tile with associated game object.
            </summary>
      <param name="obj">Transform of game object that is associated with tile or
            nested within the game object that is associated with tile.</param>
      <returns>
            Zero-based index of tile with game object associated; or a value of
            <see cref="F:Rotorz.Tile.TileIndex.invalid">TileIndex.invalid</see> when not found.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Chunk.First">
      <summary>
            Gets index of first tile in chunk.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Chunk.IsEmpty">
      <summary>
            Gets a value indicating whether chunk is void of tiles.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Chunk.ProceduralDirty">
      <summary>
            Gets or sets a value indicating whether the procedural mesh associated with
            this <see cref="T:Rotorz.Tile.Chunk" /> needs to be updated.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Chunk.ProceduralMesh">
      <summary>
            Gets the associated procedural mesh component.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Chunk.tiles">
      <summary>
            Array of tile data.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Chunk.TileSystem">
      <summary>
            Gets the tile system component.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.Coalesce">
      <summary>
            Indicates a method of coalescing which are used by brushes that support orientation
            including oriented brushes and autotile brushes.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Coalesce.None">
      <summary>
            Do not attempt to join adjacent tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Coalesce.Own">
      <summary>
            Only attempt to join adjacent tiles of same type.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Coalesce.Other">
      <summary>
            Do not join adjacent tiles of own type, but join with any other.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Coalesce.Any">
      <summary>
            Join with adjacent tiles of own type and other type.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Coalesce.Group">
      <summary>
            Join with tiles of a specific group.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.Coalesce.OwnAndGroup">
      <summary>
            Join with adjacent tiles of same type or of a specific group.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.ColliderType">
      <summary>
            Identifies a type of collider.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ColliderType.BoxCollider2D">
      <summary>
            2D version of box collider (see <see cref="T:UnityEngine.BoxCollider2D" />).
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ColliderType.BoxCollider3D">
      <summary>
            3D version of box collider (see <see cref="T:UnityEngine.BoxCollider" />).
            </summary>
    </member>
    <member name="T:Rotorz.Tile.DefaultRuntimeObjectFactory">
      <summary>
            The default object factory that is used to create and destroy tile game objects at
            runtime.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.DefaultRuntimeObjectFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Rotorz.Tile.DefaultRuntimeObjectFactory" /> class</summary>
    </member>
    <member name="P:Rotorz.Tile.DefaultRuntimeObjectFactory.Current">
      <summary>
            Gets or sets the current factory for creating and destroying tile game objects
            at runtime.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.DefaultRuntimeObjectFactory.DestroyObject(UnityEngine.GameObject,Rotorz.Tile.IObjectFactoryContext)">
      <summary>
            Destroy object instance.
            </summary>
      <param name="go">The unwanted object.</param>
      <param name="context">An object describing the context of the game object
            that is being destroyed. The context object is always specified, though
            contained members may be <c>null</c>.</param>
    </member>
    <member name="M:Rotorz.Tile.DefaultRuntimeObjectFactory.InstantiatePrefab(UnityEngine.GameObject,Rotorz.Tile.IObjectFactoryContext)">
      <summary>
            Create object instance from prefab.
            </summary>
      <param name="prefab">The prefab.</param>
      <param name="context">An object describing the context of the prefab that is
            being instantiated. The context object is always specified, though contained
            members may be <c>null</c>.</param>
      <returns>
            Object instance or <c>null</c> if object could not be created.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.EmptyBrush">
      <summary>
            Empty tiles do not have any visual representation, game object or components. These
            can be useful when creating oriented tiles that require gaps (inner orientation, for
            example). A master brush "Empty Variation" is provided for this very purpose.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.EmptyBrush.addCollider">
      <summary>
            Indicates whether box colliders should be added to painted tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.EmptyBrush.alwaysAddContainer">
      <summary>
            Indicates whether empty container object should be created despite not being needed
            by brush. Container objects are named "tile" and can be seen in tile system hierarchy.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.EmptyBrush.Awake">
      <summary>
            Invoked when brush first becomes active.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.EmptyBrush.CalculateManualOffset(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,Rotorz.Tile.Brush)">
      <summary>
            Calculates offset from actual tile position and where tile would normally be
            positioned by brush. This is used to preserve manually tweaked offsets when
            tiles are refreshed.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transform">Tile transform component.</param>
      <param name="offsetPosition">Manual position offset.</param>
      <param name="offsetRotation">Manual rotation offset.</param>
      <param name="offsetScale">Manual scale offset.</param>
      <param name="transformer">Brush used to transform painted tile.</param>
      <returns>
            A value of <c>true</c> if an offset was calculated; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.EmptyBrush.CanOverrideTagAndLayer">
      <summary>
            Gets a value indicating whether layer and tag properties can be overridden by
            this <see cref="T:Rotorz.Tile.Brush" />.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.EmptyBrush.colliderType">
      <summary>
            The type of collider associated with brush.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.EmptyBrush.CreateTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Create visual representation of tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="P:Rotorz.Tile.EmptyBrush.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.EmptyBrush.PerformsAutomaticOrientation">
      <summary>
            Gets a value indicating whether brush automatically orientates tiles.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.FallbackMode">
      <summary>
            Specifies how to handle undefined orientations.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.FallbackMode.NextBest">
      <summary>
            Attempt to find next best available orientation before assuming the default
            orientation.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.FallbackMode.UseDefault">
      <summary>
            Use default orientation when no exact orientation is found. Diagonal
            connections are gracefully ignored.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.FallbackMode.UseDefaultStrict">
      <summary>
            Use default orientation when no exact orientation is found.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.IBrushContext">
      <summary>
            Context of tile that is being painted using a brush.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IBrushContext.Brush">
      <summary>
            Gets brush that is currently being used.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IBrushContext.Column">
      <summary>
            Gets zero-based column index of tile.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IBrushContext.Row">
      <summary>
            Gets zero-based row index of tile.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IBrushContext.TileSystem">
      <summary>
            Gets active tile system.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.IDesignableObject">
      <summary>
            Represents an object which can be selected in the designer window.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IDesignableObject.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IDesignableObject.DisplayName">
      <summary>
            Gets user friendly name of designable object that is displayed in user interfaces.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.IHistoryObject">
      <summary>
            Represents an object which can be recorded in history.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IHistoryObject.Exists">
      <summary>
            Gets a value of <c>true</c> if object exists or a value of <c>false</c> if
            object has been destroyed.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IHistoryObject.HistoryName">
      <summary>
            Gets name for object which can be shown in selection history listings.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.IMaterialMappings">
      <summary>
            Interface that can be implemented by brushes for material mapping capabilities.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IMaterialMappings.MaterialMappingFrom">
      <summary>
            Gets or sets list of materials to map from.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IMaterialMappings.MaterialMappingTo">
      <summary>
            Gets or sets list of materials to map to.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.ImmediatePreviewUtility">
      <summary>
            Utility class to assist with the drawing of immediate in-editor tile previews.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.ImmediatePreviewUtility.GetPreviewTileData(Rotorz.Tile.IBrushContext,Rotorz.Tile.Brush,System.Int32)">
      <summary>
            Get data for immediate tile preview.
            </summary>
      <param name="context">Context in which brush is being used.</param>
      <param name="brush">The brush.</param>
      <param name="rotation">Zero-based index of rotation (typically zero).</param>
      <returns>
            Data for preview tile.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.ImmediatePreviewUtility.IsSeeThroughPreviewMaterial">
      <summary>
            Gets a value indicating whether see-through preview mode is active.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ImmediatePreviewUtility.PreviewMaterial">
      <summary>
            Gets the current preview material.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.InheritYesNo">
      <summary>
            A value of yes or no that can be optionally inherited.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.InheritYesNo.Inherit">
      <summary>
            Inherit value of property.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.InheritYesNo.Yes">
      <summary>
            Yes.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.InheritYesNo.No">
      <summary>
            No.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.IObjectFactory">
      <summary>
            Interface for an object creator which can be implemented and utilised to override
            the way in which game objects are created and destroyed.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.IObjectFactory.DestroyObject(UnityEngine.GameObject,Rotorz.Tile.IObjectFactoryContext)">
      <summary>
            Destroy object instance.
            </summary>
      <param name="go">The unwanted object.</param>
      <param name="context">An object describing the context of the game object
            that is being destroyed. The context object is always specified, though
            contained members may be <c>null</c>.</param>
    </member>
    <member name="M:Rotorz.Tile.IObjectFactory.InstantiatePrefab(UnityEngine.GameObject,Rotorz.Tile.IObjectFactoryContext)">
      <summary>
            Create object instance from prefab.
            </summary>
      <param name="prefab">The prefab.</param>
      <param name="context">An object describing the context of the prefab that is
            being instantiated. The context object is always specified, though contained
            members may be <c>null</c>.</param>
      <returns>
            Object instance or <c>null</c> if object could not be created.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.IObjectFactoryContext">
      <summary>
            Interface to describe the context in which an object is being instantiated or
            destroyed.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IObjectFactoryContext.Brush">
      <summary>
            Gets brush that is being used to create object.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IObjectFactoryContext.Tile">
      <summary>
            Gets data for tile that object is being created for.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.IObjectFactoryContext.TileSystem">
      <summary>
            Gets the associated tile system.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.ITilesetMetrics">
      <summary>
            Metrics of a tileset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.BorderSize">
      <summary>
            Gets size of tile border in pixels.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.BorderU">
      <summary>
            Gets size of tile border on U-axis in UV space.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.BorderV">
      <summary>
            Gets size of tile border on V-axis in UV space.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.Columns">
      <summary>
            Gets number of columns of tiles in atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.Delta">
      <summary>
            Gets delta value.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.DeltaU">
      <summary>
            Gets delta for U-axis.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.DeltaV">
      <summary>
            Gets delta for V-axis.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.OriginalAtlasHeight">
      <summary>
            Gets height of original texture asset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.OriginalAtlasWidth">
      <summary>
            Gets width of original texture asset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.Rows">
      <summary>
            Gets number of rows of tiles in atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileHeight">
      <summary>
            Gets height of tile in pixels.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileHeightUV">
      <summary>
            Gets height of tile in UV space.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileIncrementU">
      <summary>
            Gets offset to next tile on U-axis of UV coordinates.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileIncrementV">
      <summary>
            Gets offset to next tile on V-axis of UV coordinates.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileIncrementX">
      <summary>
            Gets offset in pixels to next tile on X-axis of atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileIncrementY">
      <summary>
            Gets offset in pixels to next tile on Y-axis of atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileWidth">
      <summary>
            Gets width of tile in pixels.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ITilesetMetrics.TileWidthUV">
      <summary>
            Gets width of tile in UV space.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.KeepSeparateColliderFlag">
      <summary>
            Suggests whether colliders should be kept separate under certain scenarios.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.KeepSeparateColliderFlag.ByTag">
      <summary>
            Colliders with unique tags should not be combined.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.KeepSeparateColliderFlag.ByLayer">
      <summary>
            Colliders with unique layers should not be combined.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.MaterialMappingExtensions">
      <summary>
            Extension methods for <see cref="T:Rotorz.Tile.IMaterialMappings" /> interface.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.MaterialMappingExtensions.RemapMaterial(Rotorz.Tile.IMaterialMappings,UnityEngine.Material)">
      <summary>
            Remap specified source material to the target material.
            </summary>
      <param name="mappings">Material mappings.</param>
      <param name="from">Source material.</param>
      <returns>
            The remapped material; or source material when no mapping was found or no
            target material was specified.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.OrientationUtility">
      <summary>
            Tile orientation utility functions.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.CountStrongConnections(System.Int32,System.Int32)">
      <summary>
            Count the number of strong connections between two orientations.
            </summary>
      <param name="a">Bitmask of first orientation.</param>
      <param name="b">Bitmask of second orientation.</param>
      <returns>
            The number of strong connections between specified orientations. A result of 4
            indicates the maximum number of strong connections.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.CountWeakConnections(System.Int32,System.Int32)">
      <summary>
            Count the number of weak connections between two orientations.
            </summary>
      <param name="a">Bitmask of first orientation.</param>
      <param name="b">Bitmask of second orientation.</param>
      <returns>
            The number of weak connections between specified orientations. A result of 4
            indicates the maximum number of weak connections.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.DetermineTileOrientation(Rotorz.Tile.TileSystem,System.Int32,System.Int32,Rotorz.Tile.Brush,System.Int32)">
      <summary>
            Determines orientation of the specified tile based upon the tiles which
            surround it.
            </summary>
      <param name="system">Tile system.</param>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <param name="brush">Brush to consider orientation of.</param>
      <param name="rotation">Zero-based index of rotation (typically zero).</param>
      <returns>
            Bitmask representing orientation of tile.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.FirstMaskWithRotationalSymmetry(System.Int32)">
      <summary>
            Determines mask of first orientation in group with rotational symmetry.
            </summary>
      <param name="mask">Bitmask of orientation.</param>
      <returns>
            Bitmask of first orientation when sorted by rotational symmetry.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.GetMasksWithRotationalSymmetry(System.Int32)">
      <summary>
            Get array of orientation masks which share rotational symmetry.
            </summary>
      <param name="mask">Bitmask of orientation.</param>
      <returns>
            An array of 1 or more orientation bitmasks.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.HasRotationalSymmetry(System.Int32,System.Int32)">
      <summary>
            Determines whether two orientations share rotational symmetry.
            </summary>
      <param name="a">Bitmask of first orientation.</param>
      <param name="b">Bitmask of second orientation.</param>
      <returns>
            A value of <c>true</c> if input orientations share rotational symmetry;
            otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.MaskFromName(System.String)">
      <summary>
            Gets bitmask representation of orientation from orientation name.
            </summary>
      <param name="name">Name of orientation.</param>
      <returns>
            Bitmask representation of orientation.
            </returns>
      <exception cref="T:System.NullReferenceException">
            Thrown when input orientation name is <c>null</c>.
            </exception>
      <exception cref="T:System.IndexOutOfRangeException">
            Thrown when input orientation name containers fewer than 8 characters.
            </exception>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.NameFromMask(System.Int32)">
      <summary>
            Gets name of orientation from bitmask.
            </summary>
      <param name="mask">Bitmask of orientation.</param>
      <returns>
            Name of orientation.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when bitmask does not represent a valid orientation.
            </exception>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.RotateAntiClockwise(System.Int32,System.Int32)">
      <summary>
            Rotate orientation anti-clockwise in increments of 90.
            </summary>
      <param name="orientation">Bitmask of orientation.</param>
      <param name="rotation">Zero-based index of rotation (0 = 0°, 1 = 90°, 2 = 180°, 3 = 270°).</param>
      <returns>
            Bitmask of rotated orientation.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientationUtility.RotateClockwise(System.Int32,System.Int32)">
      <summary>
            Rotate orientation clockwise in increments of 90.
            </summary>
      <param name="orientation">Bitmask of orientation.</param>
      <param name="rotation">Zero-based index of rotation (0 = 0°, 1 = 90°, 2 = 180°, 3 = 270°).</param>
      <returns>
            Bitmask of rotated orientation.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.OrientedBrush">
      <summary>
            Oriented tile brush.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.AddOrientation(Rotorz.Tile.BrushOrientation)">
      <summary>
            Adds orientation to brush.
            </summary>
      <param name="orientation">The orientation.</param>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.AddOrientation(System.Int32)">
      <summary>
            Adds orientation to brush.
            </summary>
      <param name="mask">Bit mask describing orientation.</param>
      <returns>
            The new <see cref="T:Rotorz.Tile.BrushOrientation" /> instance.
            </returns>
      <exception cref="T:System.Exception">
            Thrown if orientation already exists.
            </exception>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.AddOrientation(System.Int32,System.Boolean)">
      <summary>
            Adds orientation to brush optionally with rotational symmetry.
            </summary>
      <param name="mask">Bit mask describing orientation.</param>
      <param name="rotationalSymmetry">Indicates whether additional orientations should
            be added which have rotational symmetry.</param>
      <returns>
            First <see cref="T:Rotorz.Tile.BrushOrientation" /> in group with rotational symmetry.
            </returns>
      <exception cref="T:System.Exception">
            Thrown if orientation already exists.
            </exception>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.ApplyTransforms(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,Rotorz.Tile.Brush)">
      <summary>
            Apply transforms to newly painted tile and orientate against tile system.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transformer">Brush used to transform painted tile.
            The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields of transform
            brush should be used. <c>transformer</c> may refer to this brush, or it may refer
            to another (like alias or oriented for example).</param>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.Awake">
      <summary>
            Invoked when brush first becomes active.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.CalculateManualOffset(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,Rotorz.Tile.Brush)">
      <summary>
            Calculates offset from actual tile position and where tile would normally be
            positioned by brush. This is used to preserve manually tweaked offsets when
            tiles are refreshed.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transform">Tile transform component.</param>
      <param name="offsetPosition">Manual position offset.</param>
      <param name="offsetRotation">Manual rotation offset.</param>
      <param name="offsetScale">Manual scale offset.</param>
      <param name="transformer">Brush used to transform painted tile.</param>
      <returns>
            A value of <c>true</c> if an offset was calculated; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.CanOverrideTagAndLayer">
      <summary>
            Gets a value indicating whether layer and tag properties can be overridden by
            this <see cref="T:Rotorz.Tile.Brush" />.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.Coalesce">
      <summary>
            Gets or sets the coalescing rule that defines how painted tiles orientate
            with one another.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.CoalesceBrushGroup">
      <summary>
            Gets or sets brush group that painted tiles can coalesce with.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.CoalesceWithRotated">
      <summary>
            Gets or sets a value indicating whether painted tiles can coalesce with
            tiles which have been painted with a different rotation.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.CreateTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Create visual representation of tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.DefaultOrientation">
      <summary>
            Gets the default orientation.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.DefaultOrientationMask">
      <summary>
            Gets or sets bit mask that identifies the default orientation.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.FallbackMode">
      <summary>
            Gets or sets the fallback mode.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.FindClosestOrientation(System.Int32)">
      <summary>
            Finds closest match for the specified orientation mask.
            </summary>
      <param name="mask">Bit mask of tile orientation.</param>
      <returns>
            The orientation; otherwise <c>null</c> if not found.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.FindClosestOrientationMask(System.Int32)">
      <summary>
            Finds mask of orientation that best matches the specified orientation mask.
            </summary>
      <param name="mask">Bit mask of tile orientation.</param>
      <returns>
            Bit mask of the closest available orientation.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.FindOrientation(System.Int32)">
      <summary>
            Finds the specified orientation.
            </summary>
      <param name="mask">Bit mask of tile orientation.</param>
      <returns>
            The orientation; otherwise <c>null</c> if not found.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.OrientedBrush.forceOverrideFlags">
      <summary>
            Indicates if flags of nested brushes should be overridden.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.GetNthMaterial(System.Int32)">
      <summary>
            Gets the nth material from available renderers.
            </summary>
      <param name="n">Index of material to find.</param>
      <returns>
            The nth material; or <c>null</c> if no materials were detected.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.MaterialMappingFrom">
      <summary>
            Gets or sets list of materials to map from.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.MaterialMappingTo">
      <summary>
            Gets or sets list of materials to map to.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.OnDrawImmediatePreview(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Material,Rotorz.Tile.Brush)">
      <summary>
            Draws preview of tile using the Unity graphics or gizmos class.
            </summary>
      <param name="context">Describes context of tile that is being previewed.</param>
      <param name="previewTile">Data for preview tile.</param>
      <param name="previewMaterial">Material to use for preview.</param>
      <param name="transformer">Brush used to transform painted
            tile. The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields
            of transform brush should be used. <c>transformer</c> may refer to this brush,
            or it may refer to another (like alias or oriented for example).</param>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.Orientations">
      <summary>
            Gets read-only collection of orientations.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.PerformsAutomaticOrientation">
      <summary>
            Gets a value indicating whether brush automatically orientates tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.PrepareTileData(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,System.Int32,System.Boolean)">
      <summary>
            Prepare tile data.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">Tile that is to be prepared.</param>
      <param name="variationIndex">Hint at the desired variation index, however the
            value of this parameter can be ignored. For example, this parameter may be ignored
            if the specified variation is invalid.</param>
      <param name="refresh">Indicates if data is being prepared to refresh tile.</param>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.RemoveOrientation(System.Int32)">
      <summary>
            Removes orientation from brush.
            </summary>
      <param name="mask">Bit mask of orientation that is to be removed.</param>
    </member>
    <member name="M:Rotorz.Tile.OrientedBrush.SyncGroupedVariations(System.Int32)">
      <summary>
            Synchronise variations of grouped orientations from specified orientation.
            </summary>
      <param name="mask">Bitmask of orientation.</param>
      <exception cref="T:System.NullReferenceException">
            Thrown when specified orientation was not found.
            </exception>
    </member>
    <member name="P:Rotorz.Tile.OrientedBrush.UseWireIndicatorInEditor">
      <summary>
            Gets a value indicating whether to use wireframe cursor when painting in the
            editor. When <c>false</c> an alternative representation can be used instead.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.ProceduralMesh">
      <summary>
            Procedural mesh component is automatically attached to chunks when procedural
            2D tiles are painted.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ProceduralMesh.HasUpdatedOnce">
      <summary>
            Gets a value indicating if procedural mesh has been updated at least once.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.ProceduralMesh.InitialUpdateMesh">
      <summary>
            Update procedural mesh from tile data for first time.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.ProceduralMesh.UpdateMesh(System.Boolean)">
      <summary>
            Update procedural mesh from tile data.
            </summary>
      <param name="persist">A value of <c>true</c> indicates that generated mesh
            should be persisted at design time; <c>false</c> should always be specified
            at runtime.</param>
    </member>
    <member name="M:Rotorz.Tile.ProceduralMesh.UpdateMeshUVs">
      <summary>
            Update procedural mesh UVs from tile data.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.ProductInfo">
      <summary>
            Product information.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ProductInfo.developer">
      <summary>
            Gets the developer name.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ProductInfo.developerUri">
      <summary>
            Gets the developer URI.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ProductInfo.name">
      <summary>
            Gets the name of this product.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ProductInfo.version">
      <summary>
            Gets the version of this product.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.ReduceColliderOptions">
      <summary>
            Options which are considered when reducing colliders.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.ReduceColliderOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Rotorz.Tile.ReduceColliderOptions" /> class</summary>
    </member>
    <member name="P:Rotorz.Tile.ReduceColliderOptions.Active">
      <summary>
            Indicates whether colliders should be reduced when building tile system.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ReduceColliderOptions.IncludeSolidTiles">
      <summary>
            Indicates if colliders should be added to tiles which are flagged as solid.
            This can help to further reduce the number of colliders.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ReduceColliderOptions.KeepSeparate">
      <summary>
            Zero or more flags indicating which colliders should be kept separate.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.ReduceColliderOptions.SetDefaults">
      <summary>
            Restore default values.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.ReduceColliderOptions.SetFrom(Rotorz.Tile.ReduceColliderOptions)">
      <summary>
            Set option values from another options instance.
            </summary>
      <param name="options">Options.</param>
    </member>
    <member name="P:Rotorz.Tile.ReduceColliderOptions.SnapThreshold">
      <summary>
            Collider bounds are automatically snapped within given threshold upon
            reduction. Default is usually recommended but can be disabled with zero.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.ReduceColliderOptions.SolidTileColliderType">
      <summary>
            Indicates the type of collider to assume for tiles which are flagged as solid.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.RefreshFlags">
      <summary>
            Bit mask that defines how tiles should be refreshed.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RefreshFlags.None">
      <summary>
            Does not represent any flag at all.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RefreshFlags.Force">
      <summary>
            Tiles should each be force refreshed.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RefreshFlags.UpdateProcedural">
      <summary>
            Procedural tiles are to be refreshed from tile data.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RefreshFlags.PreservePaintedFlags">
      <summary>
            User flags of painted tiles should be preserved.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RefreshFlags.PreserveTransform">
      <summary>
            Manual offsets of position, rotation and scale should be preserved.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.RepairAction">
      <summary>
            Action to take for broken and/or dirty tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RepairAction.JustCount">
      <summary>
            Count the number of broken and dirty tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RepairAction.Erase">
      <summary>
            Erase broken tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RepairAction.ForceRefresh">
      <summary>
            Force refresh broken and dirty tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.RepairAction.RefreshDirty">
      <summary>
            Force refresh dirty tiles.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.ScaleMode">
      <summary>
            Indicates the way in which a painted tile is scaled.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ScaleMode.DontTouch">
      <summary>
            Leave tile alone! Maintain scale of prefabs.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ScaleMode.UseTileSize">
      <summary>
            Apply scale from tile size to prefabs.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.ScaleMode.Custom">
      <summary>
            Apply custom scale to prefabs.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.StrippingPreset">
      <summary>
            Identifies desired level of stripping.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.StrippingPreset.StripRuntime">
      <summary>
            Strip tile data and other unrequired functionality (default).
            </summary>
    </member>
    <member name="F:Rotorz.Tile.StrippingPreset.KeepSystemComponent">
      <summary>
            Strip tile data and other unrequired functionality with the exception of the
            tile system component.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.StrippingPreset.RuntimeAccess">
      <summary>
            Perform stripping but maintain access to tile data at runtime.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.StrippingPreset.RuntimePainting">
      <summary>
            Perform some stripping but maintain painting capabilities.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.StrippingPreset.StripEverything">
      <summary>
            Maximum level of stripping.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.StrippingPreset.NoStripping">
      <summary>
            No stripping should occur.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.StrippingPreset.Custom">
      <summary>
            Select custom stripping options.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.StrippingUtility">
      <summary>
            Functionality for stripping unwanted aspects of a tile system.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.StrippingUtility.ApplyRuntimeStripping(Rotorz.Tile.TileSystem)">
      <summary>
            Apply runtime stripping options to a tile system.
            </summary>
      <param name="tileSystem">Tile system.</param>
    </member>
    <member name="M:Rotorz.Tile.StrippingUtility.ApplyStripping(Rotorz.Tile.TileSystem)">
      <summary>
            Strip unwanted aspects of tile system with specified stripping options.
            </summary>
      <param name="tileSystem">Tile system.</param>
    </member>
    <member name="M:Rotorz.Tile.StrippingUtility.StripEmptyGameObject(UnityEngine.Transform)">
      <summary>
            Strip game object when it contains no components and has no children.
            </summary>
      <param name="obj">Transform of game object to consider stripping.</param>
      <returns>
            A value of <c>true</c> if game object was stripped; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.TileData">
      <summary>
            Data that describes a painted tile.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Rotorz.Tile.TileData" /> class</summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.AliasBrush">
      <summary>
            Gets the alias brush.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.AutotileBrush">
      <summary>
            Gets the autotile tileset brush.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileData.brush">
      <summary>
            Brush that was used to paint tile.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileData.Clear">
      <summary>
            Clear tile data.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.Dirty">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Rotorz.Tile.TileData" /> is dirty.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.Empty">
      <summary>
            Gets or sets a value indicating whether tile is empty.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileData.Equals(Rotorz.Tile.TileData)">
      <summary>
            Determines whether the specified <see cref="T:Rotorz.Tile.TileData" /> is equal to the
            current <see cref="T:Rotorz.Tile.TileData" />.
            </summary>
      <param name="tile">The <see cref="T:Rotorz.Tile.TileData" /> to compare with the current
            <see cref="T:Rotorz.Tile.TileData" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Rotorz.Tile.TileData" /> is equal to the current
            <see cref="T:Rotorz.Tile.TileData" />; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileData.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the
            current <see cref="T:Rotorz.Tile.TileData" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current
            <see cref="T:Rotorz.Tile.TileData" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current
            <see cref="T:Rotorz.Tile.TileData" />; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileData.gameObject">
      <summary>
            The game object that occupies tile.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileData.GetHashCode">
      <summary>
            Serves as a hash function for a <see cref="T:Rotorz.Tile.TileData" /> object.
            </summary>
      <returns>
            A hash code for this instance that is suitable for use in hashing algorithms
            and data structures such as a hash table.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileData.GetUserFlag(System.Int32)">
      <summary>
            Get state of custom user flag.
            </summary>
      <param name="flag">Number of flag (1-16)</param>
      <returns>
            A value of <c>true</c> if flag is on; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.TileData.HasGameObject">
      <summary>
            Gets a value indicating whether this <see cref="T:Rotorz.Tile.TileData" /> was linked to a game object.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.IsGameObjectMissing">
      <summary>
            Gets a value indicating whether game object is missing for this <see cref="T:Rotorz.Tile.TileData" />.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.Name">
      <summary>
            Gets name of the attached game object.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileData.orientationMask">
      <summary>
            Bit representation of tile orientation.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.OrientedBrush">
      <summary>
            Gets the oriented brush.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.PaintedRotation">
      <summary>
            Gets or sets rotation which was used to paint tile. This will typically be zero.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.Procedural">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Rotorz.Tile.TileData" /> is
            generated procedurally.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.Rotation">
      <summary>
            Gets or sets actual rotation of tile. The value of this property will differ from
            <see cref="P:Rotorz.Tile.TileData.PaintedRotation" /> if additional rotation occurred.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileData.SetFrom(Rotorz.Tile.TileData)">
      <summary>
            Set tile data by copying from another <see cref="T:Rotorz.Tile.TileData" /> instance.
            </summary>
      <param name="other">The other tile data instance.</param>
      <exception cref="T:System.NullReferenceException">
            Thrown when input is <c>null</c>.
            </exception>
    </member>
    <member name="M:Rotorz.Tile.TileData.SetUserFlag(System.Int32,System.Boolean)">
      <summary>
            Set state of custom user flag.
            </summary>
      <param name="flag">Number of flag (1-16)</param>
      <param name="on">Specify <c>true</c> to set flag, or <c>false</c> to unset flag.</param>
    </member>
    <member name="P:Rotorz.Tile.TileData.SolidFlag">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Rotorz.Tile.TileData" /> is solid.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileData.tileset">
      <summary>
            The associated tileset asset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.TilesetBrush">
      <summary>
            Gets the tileset brush.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileData.tilesetIndex">
      <summary>
            Zero-based index of tile in tileset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileData.UserFlags">
      <summary>
            Gets or sets bit mask that represents up to 16 user flags.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileData.variationIndex">
      <summary>
            Zero-based index of the tile variation.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.TileFacing">
      <summary>
            Direction that tiles will face upon being painted.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileFacing.Sideways">
      <summary>
            Tiles face sideways which is good for side-scrolling games like platformers.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileFacing.Upwards">
      <summary>
            Tiles face upwards which is better for top-down games.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.TileIndex">
      <summary>
            Two-dimensional index of tile in a tile system.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileIndex.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Tile.TileIndex" /> struct.
            </summary>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
    </member>
    <member name="F:Rotorz.Tile.TileIndex.column">
      <summary>
            Zero-based column index.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileIndex.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the
            current <see cref="T:Rotorz.Tile.TileIndex" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current
            <see cref="T:Rotorz.Tile.TileIndex" />.</param>
      <returns>
            A value of <c>true</c> if the specified <see cref="T:System.Object" /> is equal
            to the current <see cref="T:Rotorz.Tile.TileIndex" />; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileIndex.GetHashCode">
      <summary>
            Serves as a hash function for a <see cref="T:Rotorz.Tile.TileIndex" /> object.
            </summary>
      <returns>
            A hash code for this instance that is suitable for use in hashing algorithms
            and data structures such as a hash table.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileIndex.invalid">
      <summary>
            Represents an invalid tile index.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileIndex.op_Equality(Rotorz.Tile.TileIndex,Rotorz.Tile.TileIndex)">
      <summary>
            Determines whether a specified instance of <see cref="T:Rotorz.Tile.TileIndex" /> is equal to
            another specified <see cref="T:Rotorz.Tile.TileIndex" />.
            </summary>
      <param name="left">The first <see cref="T:Rotorz.Tile.TileIndex" /> to compare.</param>
      <param name="right">The second <see cref="T:Rotorz.Tile.TileIndex" /> to compare.</param>
      <returns>
            A value of <c>true</c> if <c>left</c> and <c>right</c> are equal; otherwise
            <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileIndex.op_Inequality(Rotorz.Tile.TileIndex,Rotorz.Tile.TileIndex)">
      <summary>
            Determines whether a specified instance of <see cref="T:Rotorz.Tile.TileIndex" /> is not equal
            to another specified <see cref="T:Rotorz.Tile.TileIndex" />.
            </summary>
      <param name="left">The first <see cref="T:Rotorz.Tile.TileIndex" /> to compare.</param>
      <param name="right">The second <see cref="T:Rotorz.Tile.TileIndex" /> to compare.</param>
      <returns>
            A value of <c>true</c> if <c>left</c> and <c>right</c> are not equal;
            otherwise <c>false</c>.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileIndex.row">
      <summary>
            Zero-based row index.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileIndex.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Rotorz.Tile.TileIndex" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:Rotorz.Tile.TileIndex" />.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileIndex.zero">
      <summary>
            Index of first tile in system.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.TilePaintedHandler">
      <summary>
            Represents the method that will handle the <see cref="E:Rotorz.Tile.Brush.TilePainted" /> event.
            </summary>
      <param name="system">Tile system.</param>
      <param name="tile">Tile data.</param>
    </member>
    <member name="T:Rotorz.Tile.Tileset">
      <summary>
            A tileset allows tileset brushes to paint procedural or non-procedural tiles using
            an atlas texture that contains multiple tiles.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.AtlasMaterial">
      <summary>
            Gets or sets atlas material.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.AtlasTexture">
      <summary>
            Gets or sets atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.BorderSize">
      <summary>
            Gets size of tile border in pixels.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.BorderU">
      <summary>
            Gets size of tile border on U-axis in UV space.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.BorderV">
      <summary>
            Gets size of tile border on V-axis in UV space.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.CalculateTexCoords(System.Int32)">
      <summary>
            Calculate texture coordinates for use with <b>GUI.DrawTextureWithTexCoords</b>.
            </summary>
      <param name="tileIndex">Zero-based index of tile in tileset.</param>
      <returns>
            Texture coordinates.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Tileset.Columns">
      <summary>
            Gets number of columns of tiles in atlas texture.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.CreateStandaloneTileMesh(System.Int32)">
      <summary>
            Create new two-triangle plane mesh to represent tile. Mesh is not maintained
            within tileset and should be manually destroyed when nolonger needed.
            </summary>
      <param name="tileIndex">Zero-based index of tile in tileset.</param>
      <returns>
            Sparkling new mesh with 4 vertices and 2 triangles fitting one unit of space.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Tileset.Delta">
      <summary>
            Gets delta value.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.DeltaU">
      <summary>
            Gets delta for U-axis.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.DeltaV">
      <summary>
            Gets delta for V-axis.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.DisplayName">
      <summary>
            Gets the user friendly display name for tileset.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.GetTileMesh(System.Int32)">
      <summary>
            Gets non-procedural mesh for tile.
            </summary>
      <param name="tileIndex">Zero-based index of tile in tileset.</param>
      <returns>
            The <see cref="T:UnityEngine.Mesh" /> when available; otherwise <c>null</c> if
            tile mesh has not been prepared.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Tileset.HistoryName">
      <summary>
            Gets name for object which can be shown in selection history listings.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.Initialize(UnityEngine.Material,UnityEngine.Texture2D,Rotorz.Tile.ITilesetMetrics)">
      <summary>
            Initialize tileset for first time.
            </summary>
      <param name="material">Atlas material.</param>
      <param name="atlas">Atlas texture.</param>
      <param name="metrics">Object that contains metrics for tileset.</param>
      <exception cref="T:System.NotSupportedException">
            Thrown when tileset has already been initialised.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when texture argument was not specified.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to set metrics of tileset from itself.
            </exception>
    </member>
    <member name="P:Rotorz.Tile.Tileset.OriginalAtlasHeight">
      <summary>
            Gets height of original texture asset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.OriginalAtlasWidth">
      <summary>
            Gets width of original texture asset.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.PrepareTileMesh(System.Int32)">
      <summary>
            Prepares mesh for specific non-procedural tile if it has not already been prepared.
            Non-procedural meshes are typically prepared and stored within tileset asset.
            </summary>
      <param name="tileIndex">Zero-based index of tile in atlas.</param>
      <returns>
            The tile <see cref="T:UnityEngine.Mesh" />.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.Tileset.procedural">
      <summary>
            Indicates if tiles should be generated procedurally or whether to create a
            game object for each tile.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.RefreshTileMesh(System.Int32)">
      <summary>
            Refresh mesh of non-procedural tile if it already exists, otherwise create it.
            </summary>
      <param name="tileIndex">Zero-based index of tile in tileset.</param>
      <returns>
            The tile <see cref="T:UnityEngine.Mesh" />.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.Tileset.Rows">
      <summary>
            Gets number of rows of tiles in atlas texture.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.SetMetricsFrom(Rotorz.Tile.ITilesetMetrics)">
      <summary>
            Set metrics of tileset.
            </summary>
      <param name="metrics">Object that contains metrics for tileset.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to set metrics of tileset from itself.
            </exception>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileHeight">
      <summary>
            Gets height of tile in pixels.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileHeightUV">
      <summary>
            Gets height of tile in UV space.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileIncrementU">
      <summary>
            Gets offset to next tile on U-axis of UV coordinates.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileIncrementV">
      <summary>
            Gets offset to next tile on V-axis of UV coordinates.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileIncrementX">
      <summary>
            Gets offset in pixels to next tile on X-axis of atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileIncrementY">
      <summary>
            Gets offset in pixels to next tile on Y-axis of atlas texture.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileWidth">
      <summary>
            Gets width of tile in pixels.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.Tileset.TileWidthUV">
      <summary>
            Gets width of tile in UV space.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.Tileset.UpdateStandaloneTileMesh(System.Int32,UnityEngine.Mesh)">
      <summary>
            Update vertices, uvs and triangles of existing standalone tile mesh.
            </summary>
      <param name="tileIndex">Zero-based index of tile in tileset.</param>
      <param name="mesh">Mesh which is to be updated.</param>
    </member>
    <member name="M:Rotorz.Tile.Tileset.UpdateStandaloneTileMeshUVs(System.Int32,UnityEngine.Mesh)">
      <summary>
            Just update UV coordinates of existing standalone tile mesh.
            </summary>
      <param name="tileIndex">Zero-based index of tile in tileset.</param>
      <param name="mesh">Mesh which is to be updated must already contain 4 vertices and 2 triangles.</param>
    </member>
    <member name="T:Rotorz.Tile.TilesetBrush">
      <summary>
            Tileset brushes can paint tiles from a tileset.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TilesetBrush.addCollider">
      <summary>
            Indicates whether box colliders should be added to painted tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TilesetBrush.alwaysAddContainer">
      <summary>
            Indicates whether empty container object should be created despite not being needed
            by brush. Container objects are named "tile" and can be seen in tile system hierarchy.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.ApplyTransforms(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,Rotorz.Tile.Brush)">
      <summary>
            Apply transforms to newly painted tile and orientate against tile system.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transformer">Brush used to transform painted tile.
            The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields of transform
            brush should be used. <c>transformer</c> may refer to this brush, or it may refer
            to another (like alias or oriented for example).</param>
    </member>
    <member name="F:Rotorz.Tile.TilesetBrush.attachPrefab">
      <summary>
            A prefab game object that should be added to painted tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.CalculateManualOffset(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Transform,UnityEngine.Vector3@,UnityEngine.Quaternion@,UnityEngine.Vector3@,Rotorz.Tile.Brush)">
      <summary>
            Calculates offset from actual tile position and where tile would normally be
            positioned by brush. This is used to preserve manually tweaked offsets when
            tiles are refreshed.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="transform">Tile transform component.</param>
      <param name="offsetPosition">Manual position offset.</param>
      <param name="offsetRotation">Manual rotation offset.</param>
      <param name="offsetScale">Manual scale offset.</param>
      <param name="transformer">Brush used to transform painted tile.</param>
      <returns>
            A value of <c>true</c> if an offset was calculated; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.TilesetBrush.CanOverrideTagAndLayer">
      <summary>
            Gets a value indicating whether layer and tag properties can be overridden by
            this <see cref="T:Rotorz.Tile.Brush" />.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TilesetBrush.colliderType">
      <summary>
            The type of collider associated with brush.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.CreateNonProceduralTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,System.Boolean)">
      <summary>
            Create non-procedural tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="addCollider">Indicates if collider should be added.</param>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.CreateProceduralTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,System.Boolean)">
      <summary>
            Create procedural tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
      <param name="addCollider">Indicates if collider should be added.</param>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.CreateTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Create visual representation of tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="P:Rotorz.Tile.TilesetBrush.DesignableType">
      <summary>
            Gets user friendly name of designable type.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.DrawImmediateTilePreview(Rotorz.Tile.IBrushContext,UnityEngine.Material,Rotorz.Tile.TileData,Rotorz.Tile.Brush)">
      <summary>
            Helper method to draw immediate preview of tileset tile.
            </summary>
      <param name="context">Describes context of tile that is being previewed.</param>
      <param name="previewMaterial">Material to use for preview.</param>
      <param name="previewTile">Data for preview tile.</param>
      <param name="transformer">Brush used to transform painted tile.
            The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" />
            fields of transform brush should be used. <c>transformer</c> may refer to this
            brush, or it may refer to another (like alias or oriented for example).</param>
    </member>
    <member name="P:Rotorz.Tile.TilesetBrush.IsProcedural">
      <summary>
            Gets a value indicating whether brush creates procedural or non-procedural
            tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.OnDrawImmediatePreview(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,UnityEngine.Material,Rotorz.Tile.Brush)">
      <summary>
            Draws preview of tile using the Unity graphics or gizmos class.
            </summary>
      <param name="context">Describes context of tile that is being previewed.</param>
      <param name="previewTile">Data for preview tile.</param>
      <param name="previewMaterial">Material to use for preview.</param>
      <param name="transformer">Brush used to transform painted
            tile. The <see cref="F:Rotorz.Tile.Brush.scaleMode" /> and <see cref="F:Rotorz.Tile.Brush.applyPrefabTransform" /> fields
            of transform brush should be used. <c>transformer</c> may refer to this brush,
            or it may refer to another (like alias or oriented for example).</param>
    </member>
    <member name="P:Rotorz.Tile.TilesetBrush.PerformsAutomaticOrientation">
      <summary>
            Gets a value indicating whether brush automatically orientates tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.PostProcessTile(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData)">
      <summary>
            Post process newly painted tile.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">The tile.</param>
    </member>
    <member name="M:Rotorz.Tile.TilesetBrush.PrepareTileData(Rotorz.Tile.IBrushContext,Rotorz.Tile.TileData,System.Int32,System.Boolean)">
      <summary>
            Prepare tile data.
            </summary>
      <param name="context">Describes context of tile that is being painted.</param>
      <param name="tile">Tile that is to be prepared.</param>
      <param name="variationIndex">Hint at the desired variation index, however the
            value of this parameter can be ignored. For example, this parameter may be ignored
            if the specified variation is invalid.</param>
      <param name="refresh">Indicates if data is being prepared to refresh tile.</param>
    </member>
    <member name="F:Rotorz.Tile.TilesetBrush.tileIndex">
      <summary>
            Zero-based index of tile in tileset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TilesetBrush.Tileset">
      <summary>
            Gets tileset that brush belongs to.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TilesetBrush.UseWireIndicatorInEditor">
      <summary>
            Gets a value indicating whether to use wireframe cursor when painting in the
            editor. When <c>false</c> an alternative representation can be used instead.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.TileSystem">
      <summary>
            Main tile system component which allows you to interact with a tile system using
            runtime or editor scripts.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.activeColumn">
      <summary>
            Zero-based index of active column.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.activeRow">
      <summary>
            Zero-based index of active row.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.ActiveTile">
      <summary>
            Gets the active tile.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.addProceduralNormals">
      <summary>
            Indicates if normals should be added to procedurally generated meshes.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.applyRuntimeStripping">
      <summary>
            Indicates if reduced level of stripping should be applied at runtime.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.BeginBulkEdit">
      <summary>
            Begins bulk painting and/or erasing of tiles.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.BulkEditMode">
      <summary>
            Gets a value indicating whether this <see cref="T:Rotorz.Tile.TileSystem" /> is
            in bulk edit mode.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.ChunkColumns">
      <summary>
            Gets the number of columns of chunks.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.ChunkHeight">
      <summary>
            Gets the height of a chunk (number of tiles).
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.ChunkIndexFromTileIndex(Rotorz.Tile.TileIndex)">
      <summary>
            Calculate chunk index from tile index.
            </summary>
      <param name="index">Index of tile.</param>
      <returns>
            The zero-based chunk index.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.ChunkIndexFromTileIndex(System.Int32,System.Int32)">
      <summary>
            Calculate chunk index from tile index.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <returns>
            The zero-based chunk index.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.ChunkRows">
      <summary>
            Gets the number of rows of chunks.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.Chunks">
      <summary>
            Gets list of available chunk components.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.ChunkWidth">
      <summary>
            Gets the width of a chunk (number of tiles).
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.ClosestTileIndexFromRay(UnityEngine.Ray)">
      <summary>
            Index of closest tile from ray.
            </summary>
      <param name="ray">Ray.</param>
      <returns>
            The zero-based tile index.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.ClosestTileIndexFromWorld(UnityEngine.Vector3)">
      <summary>
            Index of closest tile from ray.
            </summary>
      <param name="worldPoint">Point in world coordinates.</param>
      <returns>
            The tile index.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.columns">
      <summary>
            The total number of columns in tile system.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.combineChunkHeight">
      <summary>
            The height of a tile chunk to combine (in tiles).
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.combineChunkWidth">
      <summary>
            The width of a tile chunk to combine (in tiles).
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.combineIntoSubmeshes">
      <summary>
            Indicates whether tile meshes should be combined into submeshes when they
            contain multiple materials. Disable to create individual mesh objects on a
            per-material basis.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.combineMethod">
      <summary>
            Method of combining to perform upon build.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.CountNonEmptyTiles">
      <summary>
            Counts the number of non-empty tiles.
            </summary>
      <returns>
            The number non-empty tiles.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.CreateSystem(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates the tile system with specified number of rows and columns.
            </summary>
      <param name="tileWidth">Width of a tile.</param>
      <param name="tileHeight">Height of a tile.</param>
      <param name="tileDepth">Depth of a tile.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="chunkWidth">Number of columns within a chunk.</param>
      <param name="chunkHeight">Number of rows within a chunk.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.EndBulkEdit">
      <summary>
            Ends bulk painting and/or erasing of tiles.
            </summary>
      <returns>
            The number of tiles that were committed by this call to <see cref="M:Rotorz.Tile.TileSystem.EndBulkEdit" />.
            This function will always return <c>0</c> for nested calls.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.EraseAllTiles">
      <summary>
            Erases all tiles.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.EraseTile(Rotorz.Tile.TileIndex)">
      <summary>
            Erase a specific tile.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <returns>
            A value of <c>true</c> when tile was erased; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.EraseTile(System.Int32,System.Int32)">
      <summary>
            Erase a specific tile.
            </summary>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <returns>
            A value of <c>true</c> when tile was erased; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.generateSecondUVs">
      <summary>
            Indicates if second set of UVs should be automatically generated for static
            tiles during build.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.GetChunk(System.Int32,System.Int32)">
      <summary>
            Gets chunk component at row and column.
            </summary>
      <param name="row">Zero-based index of chunk row.</param>
      <param name="column">Zero-based index of chunk column.</param>
      <returns>
            The chunk.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.GetChunkFromTileIndex(Rotorz.Tile.TileIndex)">
      <summary>
            Gets chunk component from a tile index.
            </summary>
      <param name="index">Zero based index of tile.</param>
      <returns>
            The chunk component when available; otherwise a value of <c>null</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.GetChunkFromTileIndex(System.Int32,System.Int32)">
      <summary>
            Gets chunk component from a tile index.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <returns>
            The chunk component when available; otherwise a value of <c>null</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.GetTile(Rotorz.Tile.TileIndex)">
      <summary>
            Gets data of tile at row and column.
            </summary>
      <param name="index">Index of tile.</param>
      <returns>
            Tile data or a value of <c>null</c> if no tile is present.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.GetTile(System.Int32,System.Int32)">
      <summary>
            Gets data of tile at row and column.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <returns>
            Tile data or a value of <c>null</c> if no tile is present.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.hintEraseEmptyChunks">
      <summary>
            Hints if empty chunks should be automatically removed.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.IndexOfTileInChunk(Rotorz.Tile.TileIndex)">
      <summary>
            Gets index of tile at row and column in relevant chunk.
            </summary>
      <param name="index">Zero-based index of tile (in tile system).</param>
      <returns>
            Zero-based index of tile in relevant chunk.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.IndexOfTileInChunk(System.Int32,System.Int32)">
      <summary>
            Gets index of tile at row and column in relevant chunk.
            </summary>
      <param name="row">Zero-based index of tile row (in tile system).</param>
      <param name="column">Zero-based index of tile column (in tile system).</param>
      <returns>
            Zero-based index of tile in relevant chunk.
            </returns>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.IsBuilt">
      <summary>
            Gets a value indicating whether tile system has been built.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.IsEditable">
      <summary>
            Gets a value indicating whether this <see cref="T:Rotorz.Tile.TileSystem" /> is editable.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.IsSolid(Rotorz.Tile.TileIndex)">
      <summary>
            Determines whether specific tile is flagged as being solid.
            </summary>
      <param name="index">Index of tile.</param>
      <returns>
            A value of <c>true</c> if tile is flagged solid; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.IsSolid(System.Int32,System.Int32)">
      <summary>
            Determines whether specific tile is flagged as being solid.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <returns>
            A value of <c>true</c> if tile is flagged solid; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.LocalPositionFromTileIndex(Rotorz.Tile.TileIndex,System.Boolean)">
      <summary>
            Calculate position of tile in coordinates local to tile system.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="center">Specify <c>true</c> for position at center of tile;
            otherwise <c>false</c> for position at top-left of tile.</param>
      <returns>
            Position of tile local to tile system.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.LocalPositionFromTileIndex(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Calculate position of tile in coordinates local to tile system.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <param name="center">Specify <c>true</c> for position at center of tile;
            otherwise <c>false</c> for position at top-left of tile.</param>
      <returns>
            Position of tile local to tile system.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.minusOne">
      <summary>
            Vector with value (-1, -1, -1)
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.Plane">
      <summary>
            Gets mathematical plane representation of tile system.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.pregenerateProcedural">
      <summary>
            Indicates if tiles that are procedurally generated should be pre-generated
            when building tile system.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.ReduceColliders">
      <summary>
            Often box colliders of tiles painted using static brushes can be reduced.
            This field indicates whether such colliders should be reduced when building
            tile system.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.RefreshAllTiles(Rotorz.Tile.RefreshFlags)">
      <summary>
            Refresh all tiles in system.
            </summary>
      <param name="flags">A bitwise combination of <see cref="T:Rotorz.Tile.RefreshFlags" /> values.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.RefreshSurroundingTiles(Rotorz.Tile.TileIndex)">
      <summary>
            Refresh tiles that surround a specific tile.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="flags">A bitwise combination of <see cref="T:Rotorz.Tile.RefreshFlags" /> values.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.RefreshSurroundingTiles(Rotorz.Tile.TileIndex,Rotorz.Tile.RefreshFlags)">
      <summary>
            Refresh tiles that surround a specific tile.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="flags">A bitwise combination of <see cref="T:Rotorz.Tile.RefreshFlags" /> values.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.RefreshSurroundingTiles(System.Int32,System.Int32)">
      <summary>
            Refresh tiles that surround a specific tile.
            </summary>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="flags">A bitwise combination of <see cref="T:Rotorz.Tile.RefreshFlags" /> values.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.RefreshSurroundingTiles(System.Int32,System.Int32,Rotorz.Tile.RefreshFlags)">
      <summary>
            Refresh tiles that surround a specific tile.
            </summary>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="flags">A bitwise combination of <see cref="T:Rotorz.Tile.RefreshFlags" /> values.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.RefreshTile(Rotorz.Tile.TileIndex,Rotorz.Tile.RefreshFlags)">
      <summary>
            Refresh a specific tile using its original brush.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="flags">A bitwise combination of <see cref="T:Rotorz.Tile.RefreshFlags" /> values.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.RefreshTile(System.Int32,System.Int32,Rotorz.Tile.RefreshFlags)">
      <summary>
            Refresh a specific tile using its original brush.
            </summary>
      <param name="row">Zero-based row index.</param>
      <param name="column">Zero-based column index.</param>
      <param name="flags">A bitwise combination of <see cref="T:Rotorz.Tile.RefreshFlags" /> values.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.ReplaceByBrush(Rotorz.Tile.Brush,Rotorz.Tile.Brush)">
      <summary>
            Replaces all tiles that were painted using a specific brush.
            </summary>
      <param name="source">Search for tiles that were painted using <c>source</c> brush.</param>
      <param name="replacement">Repaint matching tiles using <c>replacement</c> brush.
            Specify <c>null</c> to erase matching tiles.</param>
      <returns>
            The number of tiles that were replaced.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.rows">
      <summary>
            The total number of rows in tile system.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.ScanBrokenTiles(Rotorz.Tile.RepairAction,System.Boolean)">
      <summary>
            Count and/or repair broken tiles.
            </summary>
      <param name="action">Repair action to undertake for broken and/or dirty tiles.</param>
      <param name="lazy">A value of <c>true</c> indicates that a lazier repair action
            should be undertaken. Only tiles from chunks that are flagged as dirty will be
            scanned for repair.
            <para>If in doubt simply assume the default value of <c>false</c>.</para></param>
      <returns>
            The number of detected broken tiles.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.sceneOrder">
      <summary>
            Order of tile system in "RTS: Scene" editor window.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.SetTile(Rotorz.Tile.TileIndex,Rotorz.Tile.TileData)">
      <summary>
            Set contents of tile at specified row and column. Associated game object is
            erased if tile already exists.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <param name="tile">The tile data.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.SetTile(System.Int32,System.Int32,Rotorz.Tile.TileData)">
      <summary>
            Set contents of tile at specified row and column. Associated game object is
            erased if tile already exists.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <param name="tile">The tile data.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.SetTileFrom(Rotorz.Tile.TileIndex,Rotorz.Tile.TileData)">
      <summary>
            Set contents of tile at specified row and column from existing tile data.
            Associated game object is erased if tile already exists.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <param name="other">The tile data.</param>
      <returns>
            Returns the <see cref="T:Rotorz.Tile.TileData" /> instance that was updated.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.SetTileFrom(System.Int32,System.Int32,Rotorz.Tile.TileData)">
      <summary>
            Set contents of tile at specified row and column from existing tile data.
            Associated game object is erased if tile already exists.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <param name="other">The tile data.</param>
      <returns>
            Returns the <see cref="T:Rotorz.Tile.TileData" /> instance that was updated.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.staticVertexSnapping">
      <summary>
            Indicates if vertex snapping should be applied during build process.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripBrushReferences">
      <summary>
            Gets or sets a value indicating whether brush references should be stripped at
            runtime or when performing build.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripChunkMap">
      <summary>
            Gets or sets a value indicating whether chunk map should be stripped at
            runtime or when performing build.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripChunks">
      <summary>
            Gets or sets a value indicating whether chunk game objects should be stripped
            when performing build.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripCombinedEmptyObjects">
      <summary>
            Gets or sets a value indicating whether empty game objects leftover after mesh
            combine should be stripped.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripEmptyChunks">
      <summary>
            Gets or sets a value indicating whether empty chunk game objects should be
            stripped when performing build.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripEmptyObjects">
      <summary>
            Gets or sets a value indicating whether empty game objects should be stripped
            when performing build.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StrippingOptions">
      <summary>
            Gets or sets stripping options.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StrippingPreset">
      <summary>
            Gets or sets stripping preset.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripSystemComponent">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Rotorz.Tile.TileSystem" />
            component should be stripped at runtime or when performing build.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.StripTileData">
      <summary>
            Gets or sets a value indicating whether tile data should be stripped at
            runtime or when performing build.
            </summary>
    </member>
    <member name="P:Rotorz.Tile.TileSystem.TilesFacing">
      <summary>
            Gets or sets the direction in which painted tiles will face.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.tileSize">
      <summary>
            The size of a tile.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTrace(Rotorz.Tile.Brush,Rotorz.Tile.TileTraceDirection,Rotorz.Tile.TileIndex,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that was
            painted using a specific brush.
            </summary>
      <param name="brush">Brush to search for.</param>
      <param name="direction">Direction to search.</param>
      <param name="origin">Zero-based index of origin.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTrace(Rotorz.Tile.Brush,Rotorz.Tile.TileTraceDirection,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that was
            painted using a specific brush.
            </summary>
      <param name="brush">Brush to search for.</param>
      <param name="direction">Direction to search.</param>
      <param name="row">Zero-based index of origin row.</param>
      <param name="column">Zero-based index of origin column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTrace(Rotorz.Tile.TileTraceDirection,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@,Rotorz.Tile.TileTraceDelegate)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that
            is found using custom delegate.
            </summary>
      <param name="direction">Direction to search.</param>
      <param name="row">Zero-based index of origin row.</param>
      <param name="column">Zero-based index of origin column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <param name="fn">Custom search function.</param>
      <returns>
            A value of <c>true</c> if a tile was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTrace(System.Int32,System.Int32,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@,Rotorz.Tile.TileTraceDelegate)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that is
            found using custom delegate.
            </summary>
      <param name="originRow">Zero-based index of origin row.</param>
      <param name="originColumn">Zero-based index of origin column.</param>
      <param name="destRow">Zero-based index of destination row.</param>
      <param name="destColumn">Zero-based index of destination column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <param name="fn">Custom search function.</param>
      <returns>
            A value of <c>true</c> if a tile was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceBrush(Rotorz.Tile.Brush,Rotorz.Tile.TileIndex,Rotorz.Tile.TileIndex,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles from origin to destination to find first tile that was
            painted using a specific brush.
            </summary>
      <param name="brush">Brush to search for.</param>
      <param name="origin">Zero-based index of origin.</param>
      <param name="dest">Zero-based index of destination.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceBrush(Rotorz.Tile.Brush,System.Int32,System.Int32,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles from origin to destination to find first tile that was
            painted using a specific brush.
            </summary>
      <param name="brush">Brush to search for.</param>
      <param name="originRow">Zero-based index of origin row.</param>
      <param name="originColumn">Zero-based index of origin column.</param>
      <param name="destRow">Zero-based index of destination row.</param>
      <param name="destColumn">Zero-based index of destination column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceFlags(System.Int32,Rotorz.Tile.TileIndex,Rotorz.Tile.TileIndex,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles from origin to destination to find first tile that has
            all required flags.
            </summary>
      <param name="requiredFlags">Bit mask of up to 16 user flags.</param>
      <param name="origin">Zero-based index of origin.</param>
      <param name="dest">Zero-based index of destination.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceFlags(System.Int32,Rotorz.Tile.TileTraceDirection,Rotorz.Tile.TileIndex,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that has
            all required flags.
            </summary>
      <param name="requiredFlags">Bit mask of up to 16 user flags.</param>
      <param name="direction">Direction to search.</param>
      <param name="origin">Zero-based index of origin.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceFlags(System.Int32,Rotorz.Tile.TileTraceDirection,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that has
            all required flags.
            </summary>
      <param name="requiredFlags">Bit mask of up to 16 user flags.</param>
      <param name="direction">Direction to search.</param>
      <param name="row">Zero-based index of origin row.</param>
      <param name="column">Zero-based index of origin column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceFlags(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles from origin to destination to find first tile that has
            all required flags.
            </summary>
      <param name="requiredFlags">Bit mask of up to 16 user flags.</param>
      <param name="originRow">Zero-based index of origin row.</param>
      <param name="originColumn">Zero-based index of origin column.</param>
      <param name="destRow">Zero-based index of destination row.</param>
      <param name="destColumn">Zero-based index of destination column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceSolid(Rotorz.Tile.TileIndex,Rotorz.Tile.TileIndex,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles from origin to destination to find first tile that
            is flagged as solid.
            </summary>
      <param name="origin">Zero-based index of origin.</param>
      <param name="dest">Zero-based index of destination.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceSolid(Rotorz.Tile.TileTraceDirection,Rotorz.Tile.TileIndex,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that
            is flagged as solid.
            </summary>
      <param name="direction">Direction to search.</param>
      <param name="origin">Zero-based index of origin.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceSolid(Rotorz.Tile.TileTraceDirection,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles horizontally or vertically to find first tile that is
            flagged as solid.
            </summary>
      <param name="direction">Direction to search.</param>
      <param name="row">Zero-based index of origin row.</param>
      <param name="column">Zero-based index of origin column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.TileTraceSolid(System.Int32,System.Int32,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@)">
      <summary>
            Trace through tiles from origin to destination to find first tile that
            is flagged as solid.
            </summary>
      <param name="originRow">Zero-based index of origin row.</param>
      <param name="originColumn">Zero-based index of origin column.</param>
      <param name="destRow">Zero-based index of destination row.</param>
      <param name="destColumn">Zero-based index of destination column.</param>
      <param name="hit">Details about hit. Check return value before using hit data.</param>
      <returns>
            A value of <c>true</c> if a tile is flagged as solid was hit; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.updateProceduralAtStart">
      <summary>
            Indicates whether procedural meshes should be updated when tile system becomes
            active.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.UpdateProceduralTiles(System.Boolean)">
      <summary>
            Update procedural meshes from tile data.
            </summary>
      <param name="force">A value of <c>true</c> indicates that all procedural meshes
            should be updated regardless of whether changes are detected. A value of <c>false</c>
            will only update procedural chunks that have been flagged as dirty.</param>
    </member>
    <member name="F:Rotorz.Tile.TileSystem.vertexSnapThreshold">
      <summary>
            Vertices are automatically snapped and smoothed within given threshold.
            Default is usually recommended but can be disabled with zero.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.WorldPositionFromTileIndex(Rotorz.Tile.TileIndex,System.Boolean)">
      <summary>
            Calculate position of tile in world coordinates.
            </summary>
      <param name="index">Zero-based index of tile.</param>
      <param name="center">Specify <c>true</c> for position at center of tile;
            otherwise <c>false</c> for position at top-left of tile.</param>
      <returns>
            Position of tile in world coordinates.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystem.WorldPositionFromTileIndex(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Calculate position of tile in world coordinates.
            </summary>
      <param name="row">Zero-based index of tile row.</param>
      <param name="column">Zero-based index of tile column.</param>
      <param name="center">Specify <c>true</c> for position at center of tile;
            otherwise <c>false</c> for position at top-left of tile.</param>
      <returns>
            Position of tile in world coordinates.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.TileSystemDelegate">
      <summary>
            Delegate for tile system.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.TileSystemUtility">
      <summary>
            Utility functionality for tile systems.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileSystemUtility.ExtractTiles(Rotorz.Tile.TileSystem)">
      <summary>
            Extract tile data from tile system.
            </summary>
      <param name="system">Tile system.</param>
      <returns>
            Two-dimensional array of tile data where empty tiles are <c>null</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystemUtility.FindParentTileSystem(UnityEngine.Transform)">
      <summary>
            Finds nearest tile system in parent hierarchy of an object.
            </summary>
      <param name="transform">Transform component of object.</param>
      <returns>
            The nearest <see cref="T:Rotorz.Tile.TileSystem" /> component; otherwise a value of <c>null</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystemUtility.FindTileBounds(Rotorz.Tile.TileSystem,Rotorz.Tile.TileIndex@,Rotorz.Tile.TileIndex@)">
      <summary>
            Finds minimum and maximum extents of bounds that encapsulate one or more
            painted tiles.
            </summary>
      <param name="system">Tile system.</param>
      <param name="min">Minimum tile index.</param>
      <param name="max">Maximum tile index.</param>
      <returns>
            A value of <c>true</c> if tile bounds were found; otherwise a value of <c>false</c>.
            A value of <c>false</c> is also returned for tile systems that contain no
            painted tiles.
            </returns>
    </member>
    <member name="M:Rotorz.Tile.TileSystemUtility.Resize(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Adjust the number of rows, columns and/or chunk size of a tile system.
            </summary>
      <param name="system">Tile system.</param>
      <param name="newRows">New number of rows.</param>
      <param name="newColumns">New number of columns.</param>
      <param name="rowOffset">Number of rows of tiles to offset by.</param>
      <param name="columnOffset">Number of columns of tiles to offset by.</param>
      <param name="chunkWidth">New chunk width.</param>
      <param name="chunkHeight">New chunk height.</param>
      <param name="maintainTilePositionsInWorld">Indicates if tile positions should
            be maintained in world space.</param>
    </member>
    <member name="M:Rotorz.Tile.TileSystemUtility.WillHaveOutOfBoundTiles(Rotorz.Tile.TileSystem,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Determines whether tiles will become out-of-bounds upon resizing tile system,
            or offsetting tiles within tile system.
            </summary>
      <param name="system">Tile system.</param>
      <param name="newRows">New number of rows.</param>
      <param name="newColumns">New number of columns.</param>
      <param name="rowOffset">Number of rows of tiles to offset by.</param>
      <param name="columnOffset">Number of columns of tiles to offset by.</param>
      <returns>
            A value of <c>true</c> if tiles will become out-of-bounds; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.TileTraceDelegate">
      <summary>
            Represents a method that is used to find tile when using <see cref="M:Rotorz.Tile.TileSystem.TileTrace(Rotorz.Tile.TileTraceDirection,System.Int32,System.Int32,Rotorz.Tile.TileTraceHit@,Rotorz.Tile.TileTraceDelegate)">TileSystem.TileTraceCustom</see>.
            </summary>
      <param name="tile">Current tile.</param>
      <returns>
            A value of <c>true</c> if tile was hit; otherwise <c>false</c> to proceed to the
            next tile in sequence.
            </returns>
    </member>
    <member name="T:Rotorz.Tile.TileTraceDirection">
      <summary>
            Direction in which to trace tiles.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileTraceDirection.North">
      <summary>
            Tiles north of initial position.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileTraceDirection.East">
      <summary>
            Tiles east of initial position.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileTraceDirection.South">
      <summary>
            Tiles south of initial position.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileTraceDirection.West">
      <summary>
            Tiles west of initial position.
            </summary>
    </member>
    <member name="T:Rotorz.Tile.TileTraceHit">
      <summary>
            Provides details about tile trace hit result.
            </summary>
    </member>
    <member name="M:Rotorz.Tile.TileTraceHit.#ctor(System.Int32,System.Int32,Rotorz.Tile.TileData)">
      <summary>
            Initialise tile trace hit.
            </summary>
      <param name="row">Zero-based index of row.</param>
      <param name="column">Zero-based index of column.</param>
      <param name="tile">Data for tile that was hit.</param>
    </member>
    <member name="F:Rotorz.Tile.TileTraceHit.column">
      <summary>
            Zero-based index of column that was hit.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileTraceHit.none">
      <summary>
            Indicates that no tile was hit during tile trace.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileTraceHit.row">
      <summary>
            Zero-based index of row that was hit.
            </summary>
    </member>
    <member name="F:Rotorz.Tile.TileTraceHit.tile">
      <summary>
            Data for tile that was hit.
            </summary>
    </member>
  </members>
</doc>